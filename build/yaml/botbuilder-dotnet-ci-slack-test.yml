#
# Runs functional tests against the Slack channel.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: 'windows-2019'

trigger: # ci trigger
  batch: true
  branches:
    include:
     - main
  paths:
    include:
      - '*'
    exclude:
      - doc/
      - specs/
      - Changes.md
      - LICENSE
      - README.md
      - UsingMyGet.md

pr: none # no pr trigger

variables:
  AppId: $(SlackTestBotAppId)
  AppSecret: $(SlackTestBotAppSecret)
  BotGroup: $(SlackTestBotBotGroup)
  BotName: $(SlackTestBotBotName)
  BuildConfiguration: 'debug'
  BuildPlatform: 'any cpu'
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false -p:RunAnalyzersDuringBuild=false
  Parameters.solution: Microsoft.Bot.Builder.sln
  ReleasePackageVersion: 4.8.0-preview-$(Build.BuildNumber)
  SlackBotToken: $(SlackTestBotSlackBotToken)
  SlackChannel: $(SlackTestBotSlackChannel)
  SlackClientSigningSecret: $(SlackTestBotSlackClientSigningSecret)
  SlackVerificationToken: $(SlackTestBotSlackVerificationToken)
  SolutionDir: $(System.DefaultWorkingDirectory) # Consumed in dotnet publish by Directory.Build.props and a few test projects.
#  AzureSubscription: define this in Azure
#  SlackTestBotAppId: define this in Azure
#  SlackTestBotAppSecret: define this in Azure
#  SlackTestBotBotGroup: define this in Azure
#  SlackTestBotBotName: define this in Azure
#  SlackTestBotSlackBotToken: define this in Azure
#  SlackTestBotSlackChannel: define this in Azure
#  SlackTestBotSlackClientSigningSecret: define this in Azure
#  SlackTestBotSlackVerificationToken: define this in Azure

steps:
- template: ci-build-steps.yml

- task: DotNetCoreCLI@2
  displayName: 'Dotnet Publish TestBot'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\Microsoft.Bot.Builder.Adapters.Slack.TestBot.csproj'
    arguments: '--output $(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\PublishedBot -p:TreatWarningsAsErrors=false'
    modifyOutputPath: false

#- powershell: |
#   echo '##vso[task.setvariable variable=AppId]$(SlackTestBotAppId)'
#   echo '##vso[task.setvariable variable=AppSecret]$(SlackTestBotAppSecret)'
#   echo '##vso[task.setvariable variable=BotGroup]$(SlackTestBotBotGroup)'
#   echo '##vso[task.setvariable variable=BotName]$(SlackTestBotBotName)'
#   echo '##vso[task.setvariable variable=SlackBotToken]$(SlackTestBotSlackBotToken)'
#   echo '##vso[task.setvariable variable=SlackChannel]$(SlackTestBotSlackChannel)'
#   echo '##vso[task.setvariable variable=SlackClientSigningSecret]$(SlackTestBotSlackClientSigningSecret)'
#   echo '##vso[task.setvariable variable=SlackVerificationToken]$(SlackTestBotSlackVerificationToken)'
#  displayName: 'Set Environment Variables'

- task: AzureCLI@1
  displayName: 'Create resources'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     :: Comment out either Option 1 or Option 2 below. Ultimately, both templates should be exercised to ensure they continue to work.
     
     :: Option 1: Use the "new-rg" template:
     call az deployment sub create --name "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\DeploymentTemplates\template-with-new-rg.json" --location "westus" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" groupName="$(BotGroup)" groupLocation="westus" newAppServicePlanLocation="westus" slackVerificationToken="$(SlackVerificationToken)" slackBotToken="$(SlackBotToken)"  slackClientSigningSecret="$(SlackClientSigningSecret)"
     
     :: Option 2: Use the "preexisting-rg" template:
     ::call az group create --location westus --name $(BotGroup)
     ::call az deployment group create --resource-group "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\DeploymentTemplates\template-with-preexisting-rg.json" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" appServicePlanLocation="westus" slackVerificationToken="$(SlackVerificationToken)" slackBotToken="$(SlackBotToken)"  slackClientSigningSecret="$(SlackClientSigningSecret)" --name "$(BotName)"

- task: AzureCLI@1
  displayName: 'Deploy the bot'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     call az webapp deployment source config-zip --resource-group "$(BotGroup)" --name "$(BotName)" --src "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\PublishedBot\PublishedBot.zip"

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: |
     FunctionalTests\Microsoft.Bot.Builder.FunctionalTests\Microsoft.Bot.Builder.FunctionalTests.csproj
    arguments: '-v n --configuration $(BuildConfiguration) --no-build --no-restore --filter SlackClientTest'
    workingDirectory: tests

- task: AzureCLI@1
  displayName: 'Delete Resources'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: 'call az group delete -n "$(BotGroup)" --yes'
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
