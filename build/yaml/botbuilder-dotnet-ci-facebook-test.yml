#
# Runs functional tests against the Facebook channel.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: 'windows-2019'

trigger: # ci trigger
  batch: true
  branches:
    include:
     - main
  paths:
    include:
      - '*'
    exclude:
      - doc/
      - specs/
      - Changes.md
      - LICENSE
      - README.md
      - UsingMyGet.md

pr: none # no pr trigger

variables:
  AppId: $(FacebookTestBotAppId)
  AppSecret: $(FacebookTestBotAppSecret)
  BotGroup: $(FacebookTestBotBotGroup)
  BotName: $(FacebookTestBotBotName)
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'debug'
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false -p:RunAnalyzersDuringBuild=false
  Parameters.solution: Microsoft.Bot.Builder.sln
  SolutionDir: $(System.DefaultWorkingDirectory) # Consumed in dotnet publish by Directory.Build.props and a few test projects.
#  FacebookTestBotAppId: define this in Azure
#  FacebookTestBotAppSecret: define this in Azure
#  AzureSubscription: define this in Azure
#  DeleteResourceGroup: (optional) define this in Azure. Default = true.
#  FacebookTestBotBotGroup: define this in Azure
#  FacebookTestBotBotName: define this in Azure
#  FacebookTestBotFacebookAccessToken: define this in Azure
#  FacebookTestBotFacebookAppSecret: define this in Azure
#  FacebookTestBotFacebookVerifyToken: define this in Azure
#  FacebookTestBotSenderId: define this in Azure?: This var not needed in build 156862. Revisit this after the build's test is fixed & running.

steps:
- powershell: |
   # Set values in appsettings.json file.
   $file = "$(Build.SourcesDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Facebook.PrimaryTestBot\appsettings.json";
   
   $content = Get-Content -Raw $file | ConvertFrom-Json;
   $content.FacebookVerifyToken = "$(FacebookTestBotFacebookVerifyToken)";
   $content.FacebookAppSecret = "$(FacebookTestBotFaceBookAppSecret)";
   $content.FacebookAccessToken = "$(FacebookTestBotFacebookAccessToken)";
   $content | ConvertTo-Json | Set-Content $file;
  displayName: 'Set values in appsettings.json file.'

- template: ci-build-steps.yml

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish testbot'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Facebook.PrimaryTestBot\Microsoft.Bot.Builder.Adapters.Facebook.PrimaryTestBot.csproj'
    arguments: '--output $(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Facebook.PrimaryTestBot\PublishedBot -p:TreatWarningsAsErrors=false'
    modifyOutputPath: false

- task: AzureCLI@1
  displayName: 'Create resources'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     :: Comment out either Option 1 or Option 2 below. Ultimately, both templates should be exercised to ensure they continue to work.
     
     :: Option 1: Use the "new-rg" template:
     call az deployment sub create --name "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\DeploymentTemplates\template-with-new-rg.json" --location "westus" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" groupName="$(BotGroup)" groupLocation="westus" newAppServicePlanLocation="westus" slackVerificationToken="$(SlackVerificationToken)" slackBotToken="$(SlackBotToken)"  slackClientSigningSecret="$(SlackClientSigningSecret)"
     
     :: Option 2: Use the "preexisting-rg" template:
     call az group create --location westus --name $(BotGroup)
     call az deployment group create --resource-group "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Facebook.PrimaryTestBot\DeploymentTemplates\template-with-preexisting-rg.json" --parameters appId="$(AppId)" appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" appServicePlanLocation="westus" facebookVerifyToken="verifyToken" facebookAppSecret="$(FacebookTestBotFaceBookAppSecret)"  facebookAccessToken="$(FacebookTestBotFacebookAccessToken)" --name "$(BotName)"

- task: AzureCLI@1
  displayName: 'Deploy the bot'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     call az webapp deployment source config-zip --resource-group "$(BotGroup)" --name "$(BotName)" --src "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Facebook.PrimaryTestBot\PublishedBot\PublishedBot.zip"

- powershell: |
   echo '##vso[task.setvariable variable=BOT_ENDPOINT]https://$(BotName).azurewebsites.net/api/messages'
  displayName: 'Set BOT_ENDPOINT environment variable'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '$(System.DefaultWorkingDirectory)\FunctionalTests\Microsoft.Bot.Builder.FunctionalTests\Microsoft.Bot.Builder.FunctionalTests.csproj'
    arguments: '-v n --configuration $(BuildConfiguration) --no-build --no-restore --filter FacebookChatTest'

- task: AzureCLI@1
  displayName: 'Delete Azure resources'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    scriptLocation: inlineScript
    inlineScript: 'call az group delete -n "$(BotGroup)" --yes'
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))